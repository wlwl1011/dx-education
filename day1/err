#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <time.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <linux/i2c-dev.h>
#include <linux/i2c.h>
#include <sys/ioctl.h>
#include "i2c_dq1.h"

#define DEBUG_MSG

static int i2c_fd = 0;

void print_usage(void)
{
    printf("\n");
    printf("==[ Read ]====================================================================== \n");
    printf("  i2c r <address> <size> <output_file> \n");
    printf("==[ Write ]===================================================================== \n");
    printf("  i2c w <address> <size> <input_file> \n");
}

unsigned int hex_to_int(char *pInBuf)
{
    return strtoul(pInBuf, NULL, 16);
}

int i2c_write_data(unsigned int address, unsigned int size, char *input_file)
{
    FILE *fp = fopen(input_file, "rb");
    if (!fp)
    {
        printf("Failed to open file %s for reading\n", input_file);
        return -1;
    }

    unsigned char *data = (unsigned char *)malloc(size);
    if (!data)
    {
        printf("Memory allocation failed\n");
        fclose(fp);
        return -1;
    }

    fread(data, 1, size, fp);
    fclose(fp);

    unsigned char pAddress[BUFFER_MAX] = {0};
    pAddress[0] = address & 0xFF;

    memcpy(&pAddress[1], data, size);
    free(data);

    int ret = i2c_write_reg(pAddress, size + 1);
    if (ret <= 0)
    {
        printf("i2c_write_reg error\n");
        return -1;
    }
    return 0;
}

int i2c_read_data(unsigned int address, unsigned int size, char *output_file)
{
    unsigned char pAddress[2] = {0};
    unsigned char pRead[BUFFER_MAX] = {0x0};

    if (address < 0x100)
    {
        pAddress[0] = address & 0xFF;
    }
    else
    {
        pAddress[0] = address & 0xFF;
        pAddress[1] = (address >> 8) & 0xFF;
    }

    int ret = i2c_read_reg(pAddress, 1, pRead, size);
    if (ret <= 0)
    {
        printf("i2c_read_reg error\n");
        return -1;
    }

    FILE *fp = fopen(output_file, "wb");
    if (!fp)
    {
        printf("Failed to open file %s for writing\n", output_file);
        return -1;
    }

    fwrite(pRead, 1, size, fp);
    fclose(fp);

    return 0;
}

int main(int argc, char **argv)
{
    int rc = 0;
    printf("Build : %s %s\n", __DATE__, __TIME__);
    i2c_fd = i2c_open();
    if (i2c_fd == 0)
        goto ErrorExit;

    if (argc == 5)
    {
        unsigned int address = hex_to_int(argv[2]);
        unsigned int size = atoi(argv[3]);

        if (argv[1][0] == 'r' || argv[1][0] == 'R')
        {
            rc = i2c_read_data(address, size, argv[4]);
        }
        else if (argv[1][0] == 'w' || argv[1][0] == 'W')
        {
            rc = i2c_write_data(address, size, argv[4]);
        }
        else
        {
            print_usage();
        }
    }
    else
    {
        print_usage();
    }

ErrorExit:
    i2c_close(i2c_fd);
    return rc;
}
