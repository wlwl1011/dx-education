#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <time.h>
#include <sys/time.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <linux/i2c-dev.h>
#include <linux/i2c.h>
#include <sys/ioctl.h>
#include "i2c_dq1.h"

#define DEBUG_MSG

static int i2c_fd = 0;

#if defined(IRQ_TIME_MEASURE)
static struct timeval time1, time2;

static struct timeval time_get(void)
{
	struct timeval us;

	gettimeofday(&us, NULL);

	return us;
}

static int time_measure(struct timeval start, struct timeval end)
{
	return (int)(((end.tv_sec - start.tv_sec) * 1000000) + (end.tv_usec - start.tv_usec));
}
#endif

void print_usage(void)
{
	printf("\n");
	printf("==[ Read ]====================================================================== \n");
	printf("  i2c r 0 8 \n");
	printf("==[ Write ]===================================================================== \n");
	printf("  i2c w 0 a4 \n");
}

void delay_sec(unsigned long sec )
{
	struct timespec timeToSleep;

	timeToSleep.tv_sec = sec;
	timeToSleep.tv_nsec = 0;
	nanosleep(&timeToSleep, NULL);
}

void delay(unsigned long ms )
{
	struct timespec timeToSleep;

	timeToSleep.tv_sec = 0;
	timeToSleep.tv_nsec = 1000000 * ms; //1ms
	nanosleep(&timeToSleep, NULL);
}

void delay_us(unsigned long us )
{
	struct timespec timeToSleep;

	timeToSleep.tv_sec = 0;
	timeToSleep.tv_nsec = 1000 * us; //1us
	nanosleep(&timeToSleep, NULL);
}

void str_tolower(unsigned char *pStr)
{
	while(*pStr != 0)
	{
		if( *pStr >= 'A' && *pStr <= 'Z' )
	         *pStr += 32;
		pStr++;
	}
}

unsigned int hex_to_int(char *pInBuf)
{
	return strtoul(pInBuf, NULL, 16);
}

int i2c_write_reg(unsigned char *pInBuf, __u16 InCnt)
{
	int ret = 0;
	struct i2c_msg                msg[2];
	struct i2c_rdwr_ioctl_data data;

	msg[0].addr = (__u16)I2C_ADDRESS;
	msg[0].flags = 0;
	msg[0].len = (short)InCnt;
	msg[0].buf = (unsigned char *)pInBuf;

	data.msgs = &msg[0];
	data.nmsgs = 1;

	ret =  ioctl(i2c_fd, I2C_RDWR, &data);
	if(ret <= 0) printf("i2c_write_reg error \n");
	return ret;
}

int i2c_read_reg(unsigned char *pInBuf, int InCnt, unsigned char *pOutBuf, int OutCnt)
{
	int ret = 0;
	struct i2c_msg                msg[2];
	struct i2c_rdwr_ioctl_data data;

	//write msg
	msg[0].addr = (__u16)I2C_ADDRESS;
	msg[0].flags = 0;
	msg[0].len = (short)InCnt;
	msg[0].buf = (unsigned char *)pInBuf;

	//read msg
	msg[1].addr = (__u16)I2C_ADDRESS;
	msg[1].flags = I2C_M_RD; /* 0x01 */
	msg[1].len = (short)OutCnt;
	msg[1].buf = (unsigned char *)pOutBuf;

	data.msgs = &msg[0];
	data.nmsgs = 2;

	ret = ioctl(i2c_fd, I2C_RDWR, &data);
	if(ret <= 0) printf("i2c_read_reg error \n");
	return ret;
}

int i2c_read_reg2(unsigned char *pInBuf, int InCnt, unsigned char *pOutBuf, int OutCnt)
{
	struct i2c_msg                msg[2];
	struct i2c_rdwr_ioctl_data data;

	//write msg
	msg[0].addr = (__u16)I2C_ADDRESS;
	msg[0].flags = 0;
	msg[0].len = (short)InCnt;
	msg[0].buf = (unsigned char *)pInBuf;

	//read msg
	msg[1].addr = (__u16)I2C_ADDRESS;
	msg[1].flags = I2C_M_RD;
	msg[1].len = (short)OutCnt;
	msg[1].buf = (unsigned char *)pOutBuf;

	data.msgs = &msg[0];
	data.nmsgs = 2;

	return ioctl(i2c_fd, I2C_RDWR, &data);
}

int i2c_open(void)
{
	int fd = 0;

	fd = open(I2C_DEV_PATH, O_RDWR);
	if(fd > 0)
	{
		i2c_fd = fd;
		#ifdef DEBUG_MSG
		printf("%s opened \n", I2C_DEV_PATH);
		#endif
	}
	else
	{
		printf("%s open failed \n", I2C_DEV_PATH);
	}


	return fd;
}

void i2c_close(int fd)
{
	if(fd)
	{
		close(fd);
	}
}

int i2c_get_values(int cnt, unsigned char **pIn, unsigned char *pOut)
{
	int i = 0;
	int ret = 0;
	unsigned int value = 0;

	for(i = 0; i < cnt; i++)
	{
		value = hex_to_int((char *)pIn[i]);

		if(value < 0x100)
		{
			pOut[i] = (unsigned char)value;

			ret++;
		}
		else
		{
			printf("Wrong value = %s \n", pIn[i]);
			return ret;
		}
	}

	return ret;
}

int i2c_read_byte(unsigned int address, int argc, char **argv)
{
	int requestbytes = 0;
	int ret = 0;
	int i = 0;
	int index = 0;
	unsigned char pAddress[2] = {0};
	unsigned char pRead[BUFFER_MAX] = {0x0};

	if(argc == 3) // no input
	{
		requestbytes = 1;
	}
	else
	{
		requestbytes = atoi(argv[3]);

		if(requestbytes > BUFFER_MAX)
			requestbytes = BUFFER_MAX;
	}

	if(address < 0x100)
	{
		pAddress[0] = address & 0xFF;

		#ifdef DEBUG_MSG
		printf("Read Address : 0x%02X , Size : %d \n", pAddress[0], requestbytes);
		#endif

		ret = i2c_read_reg(pAddress, 1, pRead, requestbytes);
	}
	else
	{
		pAddress[0] = address & 0xFF;
		pAddress[1] =  (address >> 8) & 0xFF;

		#ifdef DEBUG_MSG
		printf("Read Address : 0x%02X%02X , Size : %d \n", pAddress[1], pAddress[0], requestbytes);
		#endif

		ret = i2c_read_reg(pAddress, 2, pRead, requestbytes);
	}

	if(ret >= 0)
	{
		printf("----------------------------------------------------\n");
		printf("      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n");
		printf("----------------------------------------------------\n");

		for(i = 0; i < requestbytes; i++)
		{
			if ((i > 0) && (i % 16 == 0))
			{
				index += 0x10;
				printf("\n");
			}

			if (i % 16 == 0)
			{
				printf("%02X | ", index);
			}

			printf("%02X ", pRead[i]);
		}
		printf("\n");
		printf("----------------------------------------------------\n");
	}
	else
	{
		printf("read failed ret = %d \n", ret);
	}
	return ret;
}
int i2c_read(int argc, char **argv)
{
	int address = 0;
	int rc = 0;
	address = hex_to_int(argv[2]);
	if(address >= 0x00 && address < 0x10000) // 1~2 bytes
	{
		return i2c_read_byte(address, argc, argv);
	}
	return rc;
}
int i2c_write_byte1(unsigned int address, int argc, char **argv)
{
	unsigned char pAddress[BUFFER_MAX] = {0};
	int ret = 0;
	pAddress[0] = address & 0xFF;
	#ifdef DEBUG_MSG
	printf("byte = %d, write %02X ", argc - 2, pAddress[0]);
	#endif
	if(argc > 3)
	{
		ret = i2c_get_values(argc - 3, (unsigned char**)&argv[3], &pAddress[1]);
		#ifdef DEBUG_MSG
		{
			int i = 0;
			for(i = 0; i < ret; i++)
			{
				printf("%02X ", pAddress[i + 1]);
			}
		}
		#endif
	}
	printf("\n");
	ret = i2c_write_reg(pAddress, argc - 2);
	return ret;
}
int i2c_write_byte2(unsigned int address, int argc, char **argv)
{
	unsigned char pAddress[BUFFER_MAX] = {0};
	int ret = 0;
	#if 1
	pAddress[0] =  (address >> 8) & 0xFF;
	pAddress[1] = address & 0xFF;
	#ifdef DEBUG_MSG
	printf("byte = %d, write %02X%02X ", argc - 1, pAddress[0], pAddress[1]);
	#endif
	#else
	pAddress[0] =  address & 0xFF;
	pAddress[1] = (address >> 8) & 0xFF;
	#ifdef DEBUG_MSG
	printf("byte = %d, write %02X%02X ", argc - 1, pAddress[1], pAddress[0]);
	#endif
	#endif
	if(argc > 3)
	{
		ret = i2c_get_values(argc - 3, (unsigned char**)&argv[3], &pAddress[2]);
		#ifdef DEBUG_MSG
		{
			int i = 0;

			for(i = 0; i < ret; i++)
			{
				printf("%02X ", pAddress[i + 2]);
			}
		}
		#endif
	}
	printf("\n");
	ret = i2c_write_reg(pAddress, argc - 1);
	return ret;
}
int i2c_write(int argc, char **argv)
{
	int addresslen = 0;
	unsigned int address = 0;
	int rc = 0;
	// Target Address (Hex)
	addresslen = strlen(argv[2]);
	if(addresslen > 0 &&  addresslen <= 8)
	{
		address = hex_to_int(argv[2]);
	}
	else
	{
		printf("Wrong address = 0x%X \n", address);
		rc = 1;
		goto ErrorExit;
	}
	#ifdef DEBUG_MSG
	printf("write address = %X \n", address);
	#endif
	if(address < 0x100) // 1 byte
	{
		return i2c_write_byte1(address, argc, argv);
	}
	else if(address >= 0x100 && address < 0x10000) // 2 bytes
	{
		return i2c_write_byte2(address, argc, argv);
	}
ErrorExit:
	return rc;
}
int main (int argc, char **argv)
{
	int rc = 0;
	printf("Build : %s %s\n", __DATE__, __TIME__);
	i2c_fd = i2c_open();
	if(i2c_fd == 0)
		goto ErrorExit;
	printf("%s : addr = 0x%X\n", I2C_DEV_PATH, I2C_ADDRESS);
	if(argc >= 2)
	{
		if(argv[1][0] == 'r' || argv[1][0] == 'R')
		{
			rc = i2c_read(argc, argv);
		}
		else if(argv[1][0] == 'w' || argv[1][0] == 'W')
		{
			rc = i2c_write(argc, argv);
		}
		else
		{
			print_usage();
		}
	}
ErrorExit :
	i2c_close(i2c_fd);
	return rc;
}


// Read
i2c_dq1 r start_address read_len
// write
i2c_dq1 w start_address data0 data1 data2 ..
 
Example)
i2c_dq1 r 0 10 /* address 0번부터 10개의 register를 read 함 */
i2c_dq1 w 0 1 2 3 4 5  /* address 0 부터 1,2,3,4,5 총 5개의 data를 write 함 */


400kb/s 속도로 (가변) byte 문자열 손상 없이 송신
400kb/s 속도로 (가변) byte 문자열 손상 없이 수신


